apiVersion: v1
items:
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "1"
    name: confident-wilson
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 1Gi
    hostPath:
      path: /confident-wilson
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "2"
    name: fervent-torvalds
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 2Gi
    hostPath:
      path: /fervent-torvalds
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "3"
    name: infallible-cerf
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 3Gi
    hostPath:
      path: /infallible-cerf
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "7"
    name: nervous-swanson
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 7Gi
    hostPath:
      path: /nervous-swanson
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "6"
    name: trusting-wozniak
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 6Gi
    hostPath:
      path: /trusting-wozniak
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "4"
    name: vigorous-fermat
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 4Gi
    hostPath:
      path: /vigorous-fermat
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    labels:
      id: "5"
    name: youthful-spence
  spec:
    accessModes:
    - ReadWriteOnce
    capacity:
      storage: 5Gi
    hostPath:
      path: /youthful-spence
      type: ""
    persistentVolumeReclaimPolicy: Recycle
    volumeMode: Filesystem
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: webserver
    namespace: default
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
        name: nginx
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: baz-deploy
      exam: cpu-utilizer
    name: baz-deploy
    namespace: development
  spec:
    progressDeadlineSeconds: 600
    replicas: 4
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: baz-deploy
        exam: cpu-utilizer
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: baz-deploy
          exam: cpu-utilizer
      spec:
        containers:
        - image: k8s.gcr.io/hpa-example
          imagePullPolicy: Always
          name: baz-deploy
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: 100m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      exam: cpu-utilizer
    name: load-generator
    namespace: development
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        exam: cpu-utilizer
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          exam: cpu-utilizer
      spec:
        containers:
        - args:
          - sh
          - -c
          - while true; do date && sleep 500; done
          image: busybox
          imagePullPolicy: Always
          name: load-generator
          resources:
            limits:
              cpu: 250m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      k8s-app: calico-kube-controllers
    name: calico-kube-controllers
    namespace: kube-system
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
        name: calico-kube-controllers
        namespace: kube-system
      spec:
        containers:
        - env:
          - name: ENABLED_CONTROLLERS
            value: node
          - name: DATASTORE_TYPE
            value: kubernetes
          image: calico/kube-controllers:v3.8.5
          imagePullPolicy: IfNotPresent
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: foo
      exam: ep
    name: foo-deploy
    namespace: production
  spec:
    progressDeadlineSeconds: 600
    replicas: 7
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: foo
        exam: ep
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: foo
          exam: ep
      spec:
        containers:
        - image: nginx:1.14.2
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: ReplicationController
  metadata:
    labels:
      app: nginx
    name: guestbook
    namespace: default
  spec:
    replicas: 3
    selector:
      app: nginx
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
        name: nginx
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      app: log-extract
    name: foobar
    namespace: default
  spec:
    containers:
    - image: acinwinstack/cka-mock:log-extract
      imagePullPolicy: IfNotPresent
      name: foobar-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-bqvk8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: hk8s-m02
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-bqvk8
      secret:
        defaultMode: 420
        secretName: default-token-bqvk8
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      app: my-front-end
    name: front-end
    namespace: default
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-bqvk8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: hk8s-m02
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-bqvk8
      secret:
        defaultMode: 420
        secretName: default-token-bqvk8
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      prob: dns
      test: cka
    name: nginx-test
    namespace: default
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-bqvk8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: hk8s-m02
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-bqvk8
      secret:
        defaultMode: 420
        secretName: default-token-bqvk8
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: my-front-end
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
    name: front-end-service
    namespace: default
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      prob: dns
      test: cka
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:prob: {}
            f:test: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:prob: {}
            f:test: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl
    name: nginx-test
    namespace: default
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      prob: dns
      test: cka
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
